name: Git Checks

on:
  pull_request:
    branches:
      - 'main' # Trigger only when merging into the 'main' branch

jobs:
  git-checks:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.15.1'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: yarn install --immutable

      # Step 4: Set up environment variables based on branch
      - name: Create .env file for production
        if: ${{ github.base_ref == 'main' }}
        run: |
          echo "GOOGLE_PLACES_API=${{ secrets.GOOGLE_PLACES_API }}" >> .env
          echo "Environment: Production (.env file created)"
        shell: bash

        # Step 5: Verify .env contentss
      - name: Verify .env file
        run: cat .env

      # Step 6: Lint staged files
      - name: Lint staged files
        run: yarn lint-staged

      # Step 7: Validate types
      - name: Run TypeScript type check
        run: yarn ts:check

      # Step 8: Set up Android environment
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Android SDK
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          sudo mkdir -p /usr/local/android-sdk/cmdline-tools
          sudo unzip cmdline-tools.zip -d /usr/local/android-sdk/cmdline-tools
          sudo mv /usr/local/android-sdk/cmdline-tools/cmdline-tools /usr/local/android-sdk/cmdline-tools/latest
          echo "export ANDROID_HOME=/usr/local/android-sdk" >> $GITHUB_ENV
          echo "export PATH=\$ANDROID_HOME/cmdline-tools/latest/bin:\$ANDROID_HOME/platform-tools:\$ANDROID_HOME/emulator:\$PATH" >> $GITHUB_ENV
          echo "export PATH=\$ANDROID_HOME/build-tools/30.0.3:\$PATH" >> $GITHUB_ENV
          source $GITHUB_ENV
          sdkmanager --sdk_root=$ANDROID_HOME "platform-tools" "build-tools;34.0.0" "platforms;android-34"

      # Step 9: Decode and recreate the keystore file
      - name: Recreate keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          mkdir -p android/app
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/moodlyAi-private.jks


          # Step 10: Build APK and AAB
          - name: Build APK
          run: |
          cd android
          chmod +x gradlew
          ./gradlew clean
          ./gradlew assembleRelease   # Build APK
          ./gradlew bundleRelease     # Build AAB

          # Step 11: Upload APK and AAB as artifacts
          - name: Upload APK artifacts
          uses: actions/upload-artifact@v4
          with:
            name: app-builds
            path: |
            android/app/build/outputs/apk/release/app-release.apk
            android/app/build/outputs/bundle/release/app-release.aab

      - name: Generate Release Notes
        run: |
          if [ "${{ github.base_ref }}" = "main" ]; then
            echo "Improvements and bug fixes. \nAnalytics feature added to make the app more smooth. \nDownload the APK and AAB below." > release_body.txt
          else
            echo "Test build for main branch." > release_body.txt
          fi

      # Step 12: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        if: ${{ github.base_ref == 'main' }}
        uses: actions/create-release@v1
        with:
          tag_name: v0.0.1
          release_name: 'Release v0.0.1'
          body: ./release_body.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # Step 13: Upload APK to Release
      - name: Upload APK to Release
        if: ${{ github.base_ref == 'main' }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android/app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN  }}
